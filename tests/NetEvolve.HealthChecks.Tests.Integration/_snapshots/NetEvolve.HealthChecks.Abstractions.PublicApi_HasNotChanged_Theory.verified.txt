namespace NetEvolve.HealthChecks.Abstractions
{
    public abstract class ConfigurableHealthCheckBase<TConfiguration> : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
        where TConfiguration :  class, System.IEquatable<TConfiguration>, new ()
    {
        protected ConfigurableHealthCheckBase(Microsoft.Extensions.Options.IOptionsMonitor<TConfiguration> optionsMonitor) { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
        protected abstract System.Threading.Tasks.ValueTask<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> ExecuteHealthCheckAsync(string name, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus failureStatus, TConfiguration options, System.Threading.CancellationToken cancellationToken);
        protected static Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult HealthCheckDegraded(string name) { }
        protected static Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult HealthCheckState(bool condition, string name) { }
        protected static Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult HealthCheckUnhealthy(Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus failureStatus, string name, string message = "Unhealthy", System.Exception? ex = null) { }
    }
    public abstract class HealthCheckBase : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
    {
        protected HealthCheckBase() { }
        public System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext context, System.Threading.CancellationToken cancellationToken = default) { }
        protected abstract System.Threading.Tasks.ValueTask<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult> ExecuteHealthCheckAsync(string name, Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus failureStatus, System.Threading.CancellationToken cancellationToken);
    }
    public static class IHealthChecksBuilderExtensions
    {
        public static bool IsNameAlreadyUsed<T>(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder, string name)
            where T : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck { }
        public static bool IsServiceTypeRegistered<T>(this Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder builder)
            where T :  class { }
    }
    public interface ISqlCheckOptions
    {
        string Command { get; }
        string ConnectionString { get; set; }
        int Timeout { get; set; }
    }
}